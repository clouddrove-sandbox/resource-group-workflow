name: Release on PR Merge (Reusable)

on:
  workflow_call:
    inputs:
      target_branch:
        required: true
        type: string
      version_file:
        required: false
        type: string
        default: 'VERSION'
    secrets:
      GH_TOKEN:
        required: true

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == inputs.target_branch }}

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Set up Git
      run: |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

    - name: Install git-chglog
      run: |
        wget https://github.com/git-chglog/git-chglog/releases/download/v0.15.1/git-chglog_0.15.1_linux_amd64.tar.gz
        tar xzf git-chglog_0.15.1_linux_amd64.tar.gz
        sudo mv git-chglog /usr/local/bin/

    - name: Ensure at least one tag exists
      id: ensure_tag
      run: |
        TAG_COUNT=$(git tag | wc -l)
        if [ "$TAG_COUNT" -eq 0 ]; then
          echo "v0.0.0" > ${{ inputs.version_file }}
          git add ${{ inputs.version_file }}
          git commit -m "chore: add initial version file"
          git tag v0.0.0
          git push origin v0.0.0
        fi

    - name: Get PR labels
      id: pr_labels
      run: |
        LABELS=$(jq -r '.pull_request.labels | map(.name) | join(",")' "$GITHUB_EVENT_PATH")
        echo "labels=$LABELS" >> $GITHUB_OUTPUT

    - name: Check for no-tag label
      id: skip_tag
      run: |
        if [[ "${{ steps.pr_labels.outputs.labels }}" == *"no-tag"* ]]; then
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

    - name: Get latest tag
      id: get_latest_tag
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0)
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

    - name: Calculate next version
      id: calc_version
      if: steps.skip_tag.outputs.skip == 'false'
      run: |
        LATEST=${{ steps.get_latest_tag.outputs.latest_tag }}
        # Remove the leading 'v'
        BASE_VERSION=${LATEST#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
        LABELS="${{ steps.pr_labels.outputs.labels }}"
        if [[ "$LABELS" == *"major"* ]]; then
          ((MAJOR+=1)); MINOR=0; PATCH=0
        elif [[ "$LABELS" == *"minor"* ]]; then
          ((MINOR+=1)); PATCH=0
        elif [[ "$LABELS" == *"patch"* ]]; then
          ((PATCH+=1))
        else
          # Default to patch bump if no label found
          ((PATCH+=1))
        fi
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "$NEW_VERSION" > ${{ inputs.version_file }}

    - name: Commit and push version bump
      if: steps.skip_tag.outputs.skip == 'false'
      run: |
        git add ${{ inputs.version_file }}
        git commit -m "chore: bump version to ${{ steps.calc_version.outputs.new_version }}"
        git push https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ inputs.target_branch }}

    - name: Create GitHub tag for the new version
      if: steps.skip_tag.outputs.skip == 'false'
      run: |
        git tag ${{ steps.calc_version.outputs.new_version }}
        git push https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }} ${{ steps.calc_version.outputs.new_version }}

    - name: Generate Changelog
      if: steps.skip_tag.outputs.skip == 'false'
      run: |
        git chglog ${{ steps.get_latest_tag.outputs.latest_tag }}..${{ steps.calc_version.outputs.new_version }} > CHANGELOG.md

    - name: Create GitHub Release
      if: steps.skip_tag.outputs.skip == 'false'
      uses: softprops/action-gh-release@v2
      with:
        body_path: ./CHANGELOG.md
        draft: false
        tag_name: ${{ steps.calc_version.outputs.new_version }}

    - name: Action Summary
      run: |
        if [[ "${{ steps.skip_tag.outputs.skip }}" == "true" ]]; then
          echo "ðŸš« Release skipped due to 'no-tag' label."
        else
          echo "âœ… Released ${{ steps.calc_version.outputs.new_version }} successfully."
        fi
